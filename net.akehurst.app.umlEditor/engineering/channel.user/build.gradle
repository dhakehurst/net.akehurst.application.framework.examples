/**
 * Copyright (C) 2016 Dr. David H. Akehurst (http://dr.david.h.akehurst.net)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
  id "org.kravemir.gradle.sass" version "1.2.2"
//  id "com.moowork.node" version "1.1.1"
}

dependencies {

	// computational
	compile project(":${rootProject.name}.computational.interfaceUser")
	compile "${af}.computational.interfaceAuthorisation:${afVersion}"
	compile "${af}.computational.interfaceUser:${afVersion}"

	compile "${af}.engineering.gui.common:${afVersion}"
	compile "${af}.engineering.gui.languageService:${afVersion}"

	compile "${af}.technology.interfaceGui:${afVersion}"
//	compile "${af}.technology.authentication:${afVersion}"
	compile "${af}.technology.gui.common:${afVersion}"
	
	compile 'org.webjars:font-awesome:4.6.3'

}

jar {

	from ("${projectDir}/src/main/js", {
		into "META-INF/resources/webjars/shapes"
		include "**/*.js"
	})

}

sass {
    main {
        srcDir = file("$projectDir/src/main/sass")
        outDir = file("$projectDir/src/main/resources/css")
//        outDir = file("$buildDir/css")
    }
}

sourceSets {
	main {
		java {
			resources {
				srcDir "$projectDir/src/main/resources"
			}
		}
	}
}

/*
node {
  download = true
  workDir = file("${project.buildDir}/nodejs")
  npmWorkDir = file("${project.buildDir}/npm")
  yarnWorkDir = file("${project.buildDir}/yarn")
  nodeModulesDir = file("${project.projectDir}")
}

import com.moowork.gradle.node.NodeExtension
import com.moowork.gradle.node.variant.VariantBuilder

String nodeExecutable() {
  NodeExtension nodeExt = NodeExtension.get(project)
  return new VariantBuilder(nodeExt).build().nodeExec
}

compileTypeScript {
  compilerExecutable "${nodeExecutable()} ${project.projectDir}/node_modules/typescript/lib/tsc.js"
  dependsOn "npmInstall"
  source = file('src/main/typescript')
  rootDir = file('src/main/typescript')
}
*/